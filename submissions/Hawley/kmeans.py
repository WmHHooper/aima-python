import numpy as npimport matplotlib.pyplot as plt# import fileinputN = 100								# number of observations / 'points'K = 4								# number of categories / 'means'P = 10								# plot intervaldef distance(x1,y1,x2,y2):			# pythagorean distance	return np.sqrt( (x2-x1)**2 + (y2-y1)**2)# Fancy data structure: We will group points by common indices in separate arrays, # i.e. the first point will have coordinates (x[1],y[1])points_x = np.random.rand(N)			# points are random on [0,1]points_y = np.random.rand(N)colors = np.random.rand(N).astype(int)   # colors will show who belongs to which meanmeans_x = np.random.rand(K)				# initialize means w/ random numbers on [0,1]means_y = np.random.rand(K)fig = plt.figure()iterations = 100for i in range(iterations):	# loop over all points: figure out who belongs to which means (assign colors)	for j in range(N):		min_dist = 99999.9    			# big number		for m in range(K): 				# loop over all means			dist = distance(points_x[j], points_y[j], means_x[m], means_y[m])			if (dist < min_dist):		# then update the color				min_dist = dist				colors[j] = m	#re-evaluate means	for m in range(K):		inds = np.where( m == colors)			# indices of everybody belonging to one mean		means_x[m] = np.mean(points_x[inds])	# take the mean of the x-values in the group		means_y[m] = np.mean(points_y[inds])	# take the mean of the y-values in the group	# Update the picture	if(not i % P):		plt.scatter(points_x, points_y, c=colors, s=50, alpha=0.7)		plt.show()		# print('Proceed', '?')		# proceed = fileinput.input()